import java.lang.Math;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;



public class Hello {
    @Test
    public void testSumOfPrime() {
        assertEquals(17, SumOfPrime(10));
        assertEquals(41, SumOfPrime(15));
    }

    @Test
    public void testMergeSort() {
        assertArrayEquals(new int[] {1,2,3,3,4,4,5,6,6,7,8}, MergeSort(new int[] {1,3,4,5,6}, new int[] {2,3,4,6,7,8}) );
        assertArrayEquals(new int[] {1,1,1,1,2,3,4,6,7,8}, MergeSort(new int[]{1,1,1,1}, new int[]{2,3,4,6,7,8}) );
        assertArrayEquals(new int[] {1,1,1,1}, MergeSort(new int[]{1,1,1,1}, new int[]{}) );
    }


    public static void main(String[] args) {


    }


    public static int SumOfPrime(int n) {

        int total = 0;

        for (int num = 2; num <= n; num++) {

            int divisor = 2;
            boolean isPrime = true;


            while (divisor < Math.floor(Math.sqrt(num)) + 1) {
                if ( num % divisor == 0 ) {
                    isPrime = false;
                    break;
                } else {
                    divisor += 1;
                }
            }

            
            if (isPrime) { total += num ; }

        }

        return total;

    }




    public static  int[] MergeSort(int[] arr1, int[] arr2) {



        ArrayList<Integer> res = new ArrayList<>();
        int i = 0;
        int j = 0;
        int n1 = arr1.length;
        int n2 = arr2.length;



        while (i < n1 && j < n2) {

            if ( arr1[i] <= arr2[j]) {
                res.add(arr1[i]);
                i++;
            } else {
                res.add(arr2[j]);
                j++;
            }
        }

        while ( i < n1 ) {
            res.add(arr1[i]);
            i++;
        }

        while ( j < n2 ) {
            res.add(arr2[j]);
            j++;
        }

        int[] out = new int[res.size()];
        Arrays.setAll(out, res::get);
        return out;


    }
}
